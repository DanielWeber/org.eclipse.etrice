/*******************************************************************************
 * Copyright (c) 2010 protos software gmbh (http://www.protos.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * CONTRIBUTORS:
 * 		Thomas Schuetz and Henrik Rentz-Reichert (initial contribution)
 * 
 *******************************************************************************/


import ecore;
import xtext;

process(xtext::GeneratedMetamodel this) :
  process(ePackage)
;

// the multiplicity is an optional attribute with a default of 1
process(ecore::EPackage this) :
	this.eClassifiers.typeSelect(ecore::EClass).process()
;

process(EClass this) :
    switch (name) {
        case "Port": (eAllAttributes.select(e|e.name=="multiplicity").first().setDefaultValueLiteral("1"))
        case "RefinedState": (addOperation("getName", getEcoreDataType("EString")))
        default:    null
    }
;

EDataType getEcoreDataType(String name) :
    org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier(name)
;

addOperation(EClass this, String name, EClassifier type) :
    let op  = newOperation(name, type) :
        newDelegatingBodyAnnotation(op)
;

create EOperation newOperation(EClass owner, String name, EClassifier type) :
    setName(name) -> setEType(type) -> owner.eOperations.add(this)
;

create EAnnotation newDelegatingBodyAnnotation(EOperation op) :
    let d = new EStringToStringMapEntry :
        setSource("http://www.eclipse.org/emf/2002/GenModel") ->
        d.setKey("body") ->
        switch (op.name) {
	        case "getName": (d.setValue("return getBase()==null? \"\":getBase().getName();"))
	        default:    null
	    } ->
        details.add(d) ->
        op.eAnnotations.add(this)
;
